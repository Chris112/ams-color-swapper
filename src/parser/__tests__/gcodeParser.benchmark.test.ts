import { describe, it, expect } from 'vitest';
import { GcodeParser } from '../gcodeParser';
import { GcodeParserOptimized } from '../gcodeParserOptimized';
import { readFileSync } from 'fs';
import { join } from 'path';

// Helper to create File object from buffer
function createFileFromPath(filePath: string): File {
  const content = readFileSync(filePath, 'utf-8');
  const blob = new Blob([content], { type: 'text/plain' });
  const fileName = filePath.split('/').pop() || 'test.gcode';
  const file = new File([blob], fileName, { type: 'text/plain' });

  // Add the text() method
  (file as any).text = async () => content;

  return file;
}

// Helper to measure parsing performance
async function measureParseTime(
  parser: GcodeParser,
  file: File,
  runs: number = 5
): Promise<{
  average: number;
  min: number;
  max: number;
  times: number[];
}> {
  const times: number[] = [];

  for (let i = 0; i < runs; i++) {
    const start = performance.now();
    await parser.parse(file);
    const end = performance.now();
    times.push(end - start);
  }

  return {
    average: times.reduce((a, b) => a + b, 0) / times.length,
    min: Math.min(...times),
    max: Math.max(...times),
    times,
  };
}

describe('GcodeParser Benchmark', () => {
  describe('Original Parser', () => {
    it('should measure performance on large file (6.5MB)', async () => {
      const parser = new GcodeParser();
      const filePath = join(__dirname, 'fixtures', '4_color_Slowpoke.gcode');
      const file = createFileFromPath(filePath);

      console.log(
        `\n📊 Benchmarking file: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)`
      );

      const results = await measureParseTime(parser, file, 5);

      console.log('🏁 Benchmark Results:');
      console.log(`   Average: ${results.average.toFixed(2)}ms`);
      console.log(`   Min:     ${results.min.toFixed(2)}ms`);
      console.log(`   Max:     ${results.max.toFixed(2)}ms`);
      console.log(`   All runs: ${results.times.map((t) => t.toFixed(0)).join(', ')}ms`);

      // Store baseline for comparison
      console.log(`\n💾 Baseline performance: ${results.average.toFixed(2)}ms`);

      // Basic assertions
      expect(results.average).toBeLessThan(5000); // Should parse in under 5 seconds
      expect(results.min).toBeGreaterThan(0);
    });

    it('should measure performance on small file', async () => {
      const parser = new GcodeParser();

      // Create a small test file
      const smallContent = `;generated by Test
; total estimated time: 1h 30m 0s
T0
G0 X0 Y0 Z0.2
; layer 0
G1 X100 Y100 E1.0
T1  
; layer 1
G1 X200 Y200 E2.0
`.repeat(100); // About 1KB

      const blob = new Blob([smallContent], { type: 'text/plain' });
      const file = new File([blob], 'small-test.gcode', { type: 'text/plain' });
      (file as any).text = async () => smallContent;

      console.log(`\n📊 Benchmarking file: ${file.name} (${(file.size / 1024).toFixed(2)}KB)`);

      const results = await measureParseTime(parser, file, 10);

      console.log('🏁 Benchmark Results:');
      console.log(`   Average: ${results.average.toFixed(2)}ms`);
      console.log(`   Min:     ${results.min.toFixed(2)}ms`);
      console.log(`   Max:     ${results.max.toFixed(2)}ms`);

      expect(results.average).toBeLessThan(50); // Small file should parse very quickly
    });

    it('should measure line processing rate', async () => {
      const parser = new GcodeParser();
      const filePath = join(__dirname, 'fixtures', '4_color_Slowpoke.gcode');
      const content = readFileSync(filePath, 'utf-8');
      const lineCount = content.split('\n').length;

      const file = createFileFromPath(filePath);

      const start = performance.now();
      await parser.parse(file);
      const end = performance.now();

      const timeMs = end - start;
      const linesPerSecond = (lineCount / timeMs) * 1000;

      console.log(`\n📈 Processing Rate:`);
      console.log(`   Total lines: ${lineCount.toLocaleString()}`);
      console.log(`   Parse time: ${timeMs.toFixed(2)}ms`);
      console.log(`   Rate: ${linesPerSecond.toFixed(0)} lines/second`);

      expect(linesPerSecond).toBeGreaterThan(10000); // Should process at least 10k lines/sec
    });
  });

  describe('Optimized Parser', () => {
    it('should measure performance on large file (6.5MB)', async () => {
      const parser = new GcodeParserOptimized();
      const filePath = join(__dirname, 'fixtures', '4_color_Slowpoke.gcode');
      const file = createFileFromPath(filePath);

      console.log(
        `\n📊 [OPTIMIZED] Benchmarking file: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)`
      );

      const results = await measureParseTime(parser as any, file, 5);

      console.log('🏁 [OPTIMIZED] Benchmark Results:');
      console.log(`   Average: ${results.average.toFixed(2)}ms`);
      console.log(`   Min:     ${results.min.toFixed(2)}ms`);
      console.log(`   Max:     ${results.max.toFixed(2)}ms`);
      console.log(`   All runs: ${results.times.map((t) => t.toFixed(0)).join(', ')}ms`);

      // Compare with baseline
      const baselineAvg = 211.2; // From original parser
      const improvement = ((baselineAvg - results.average) / baselineAvg) * 100;
      console.log(`\n📈 Performance improvement: ${improvement.toFixed(1)}%`);

      expect(results.average).toBeLessThan(baselineAvg); // Should be faster
    });

    it('should measure performance on small file', async () => {
      const parser = new GcodeParserOptimized();

      // Create a small test file
      const smallContent = `;generated by Test
; total estimated time: 1h 30m 0s
T0
G0 X0 Y0 Z0.2
; layer 0
G1 X100 Y100 E1.0
T1  
; layer 1
G1 X200 Y200 E2.0
`.repeat(100);

      const blob = new Blob([smallContent], { type: 'text/plain' });
      const file = new File([blob], 'small-test.gcode', { type: 'text/plain' });
      (file as any).text = async () => smallContent;

      console.log(
        `\n📊 [OPTIMIZED] Benchmarking file: ${file.name} (${(file.size / 1024).toFixed(2)}KB)`
      );

      const results = await measureParseTime(parser as any, file, 10);

      console.log('🏁 [OPTIMIZED] Benchmark Results:');
      console.log(`   Average: ${results.average.toFixed(2)}ms`);
      console.log(`   Min:     ${results.min.toFixed(2)}ms`);
      console.log(`   Max:     ${results.max.toFixed(2)}ms`);

      expect(results.average).toBeLessThan(50);
    });

    it('should measure line processing rate', async () => {
      const parser = new GcodeParserOptimized();
      const filePath = join(__dirname, 'fixtures', '4_color_Slowpoke.gcode');
      const content = readFileSync(filePath, 'utf-8');
      const lineCount = content.split('\n').length;

      const file = createFileFromPath(filePath);

      const start = performance.now();
      await parser.parse(file);
      const end = performance.now();

      const timeMs = end - start;
      const linesPerSecond = (lineCount / timeMs) * 1000;

      console.log(`\n📈 [OPTIMIZED] Processing Rate:`);
      console.log(`   Total lines: ${lineCount.toLocaleString()}`);
      console.log(`   Parse time: ${timeMs.toFixed(2)}ms`);
      console.log(`   Rate: ${linesPerSecond.toFixed(0)} lines/second`);

      expect(linesPerSecond).toBeGreaterThan(1000000); // Should be much faster
    });
  });
});
